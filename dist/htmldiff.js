(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["HtmlDiff"] = factory();
	else
		root["HtmlDiff"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\r\n\r\nManually translated to JS from C#.\r\nOriginal: https://github.com/Rohland/htmldiff.net\r\nOriginal was actually a .net port of a Ruby implementation: https://github.com/myobie/htmldiff\r\nThere also looks to be other implementations in CoffeeScript, as well as an Angular module.\r\n\r\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar HtmlDiff = function HtmlDiff(oldText, newText) {\n    /// <summary>\n    /// This value defines balance between speed and memory utilization. The higher it is the faster it works and more memory consumes.\n    /// </summary>\n    this.MatchGranularityMaximum = 4;\n\n    this._content = [];\n    this._newText = newText;\n    this._oldText = oldText;\n    var that = this;\n\n    this._specialCaseClosingTags = {\n        '</strong>': 0,\n        '</em>': 0,\n        '</b>': 0,\n        '</i>': 0,\n        '</big>': 0,\n        '</small>': 0,\n        '</u>': 0,\n        '</sub>': 0,\n        '</sup>': 0,\n        '</strike>': 0,\n        '</s>': 0\n    };\n\n    this._specialCaseOpeningTagRegex = new RegExp(/<((strong)|(b)|(i)|(em)|(big)|(small)|(u)|(sub)|(sup)|(strike)|(s))[>\\s]+/i);\n\n    this._specialTagDiffStack = [];\n\n    this._newWords;\n    this._oldWords;\n    this._matchGranularity;\n    this._blockExpressions = [];\n\n    /// <summary>\n    /// Defines how to compare repeating words. Valid values are from 0 to 1.\n    /// This value allows to exclude some words from comparison that eventually\n    /// reduces the total time of the diff algorithm.\n    /// 0 means that all words are excluded so the diff will not find any matching words at all.\n    /// 1 (default value) means that all words participate in comparison so this is the most accurate case.\n    /// 0.5 means that any word that occurs more than 50% times may be excluded from comparison. This doesn't\n    /// mean that such words will definitely be excluded but only gives a permission to exclude them if necessary.\n    /// </summary>\n    this.RepeatingWordsAccuracy = 1;\n\n    /// <summary>\n    /// If true all whitespaces are considered as equal\n    /// </summary>\n    this.IgnoreWhitespaceDifferences = false;\n\n    /// <summary>\n    /// If some match is too small and located far from its neighbors then it is considered as orphan\n    /// and removed. For example:\n    /// <code>\n    /// aaaaa bb ccccccccc dddddd ee\n    /// 11111 bb 222222222 dddddd ee\n    /// </code>\n    /// will find two matches <code>bb</code> and <code>dddddd ee</code> but the first will be considered\n    /// as orphan and ignored, as result it will consider texts <code>aaaaa bb ccccccccc</code> and\n    /// <code>11111 bb 222222222</code> as single replacement:\n    /// <code>\n    /// &lt;del&gt;aaaaa bb ccccccccc&lt;/del&gt;&lt;ins&gt;11111 bb 222222222&lt;/ins&gt; dddddd ee\n    /// </code>\n    /// This property defines relative size of the match to be considered as orphan, from 0 to 1.\n    /// 1 means that all matches will be considered as orphans.\n    /// 0 (default) means that no match will be considered as orphan.\n    /// 0.2 means that if match length is less than 20% of distance between its neighbors it is considered as orphan.\n    /// </summary>\n    this.OrphanMatchThreshold = 0;\n\n    /// <summary>\n    /// Builds the HTML diff output\n    /// </summary>\n    /// <returns>HTML diff markup</returns>\n    this.Build = function () {\n        // If there is no difference, don't bother checking for differences\n        if (that._oldText == that._newText) {\n            return that._newText;\n        }\n\n        SplitInputsToWords();\n\n        that._matchGranularity = Math.min(that.MatchGranularityMaximum, Math.min(that._oldWords.length, that._newWords.length));\n\n        var operations = Operations();\n\n        for (var i = 0; i < operations.length; i++) {\n            PerformOperation(operations[i]);\n        }\n\n        return that._content.join('');\n    };\n\n    /// <summary>\n    /// Uses <paramref name=\"expression\"/> to group text together so that any change detected within the group is treated as a single block\n    /// </summary>\n    /// <param name=\"expression\"></param>\n    this.AddBlockExpression = function (expression) {\n        that._blockExpressions.push(expression);\n    };\n\n    var SplitInputsToWords = function SplitInputsToWords() {\n        that._oldWords = HtmlDiff.WordSplitter.ConvertHtmlToListOfWords(that._oldText, that._blockExpressions);\n        that._oldText = null;\n\n        that._newWords = HtmlDiff.WordSplitter.ConvertHtmlToListOfWords(that._newText, that._blockExpressions);\n        that._newText = null;\n    };\n\n    var PerformOperation = function PerformOperation(operation) {\n        switch (operation.Action) {\n            case HtmlDiff.Action.Equal:\n                ProcessEqualOperation(operation);\n                break;\n            case HtmlDiff.Action.Delete:\n                ProcessDeleteOperation(operation, 'diffdel');\n                break;\n            case HtmlDiff.Action.Insert:\n                ProcessInsertOperation(operation, 'diffins');\n                break;\n            case HtmlDiff.Action.None:\n                break;\n            case HtmlDiff.Action.Replace:\n                ProcessReplaceOperation(operation);\n                break;\n        }\n    };\n\n    var ProcessReplaceOperation = function ProcessReplaceOperation(operation) {\n        ProcessDeleteOperation(operation, 'diffmod');\n        ProcessInsertOperation(operation, 'diffmod');\n    };\n\n    var ProcessInsertOperation = function ProcessInsertOperation(operation, cssClass) {\n        InsertTag('ins', cssClass, that._newWords.slice(operation.StartInNew, operation.EndInNew));\n    };\n\n    var ProcessDeleteOperation = function ProcessDeleteOperation(operation, cssClass) {\n        InsertTag('del', cssClass, that._oldWords.slice(operation.StartInOld, operation.EndInOld));\n    };\n\n    var ProcessEqualOperation = function ProcessEqualOperation(operation) {\n        that._content.push(that._newWords.slice(operation.StartInNew, operation.EndInNew).join(''));\n    };\n\n    /// <summary>\n    ///     This method encloses words within a specified tag (ins or del), and adds this into \"content\",\n    ///     with a twist: if there are words contain tags, it actually creates multiple ins or del,\n    ///     so that they don't include any ins or del. This handles cases like\n    ///     old: '<p>a</p>'\n    ///     new: '<p>ab</p>\n    ///     <p>\n    ///         c</b>'\n    ///         diff result: '<p>a<ins>b</ins></p>\n    ///         <p>\n    ///             <ins>c</ins>\n    ///         </p>\n    ///         '\n    ///         this still doesn't guarantee valid HTML (hint: think about diffing a text containing ins or\n    ///         del tags), but handles correctly more cases than the earlier version.\n    ///         P.S.: Spare a thought for people who write HTML browsers. They live in this ... every day.\n    /// </summary>\n    /// <param name=\"tag\"></param>\n    /// <param name=\"cssClass\"></param>\n    /// <param name=\"words\"></param>\n    var InsertTag = function InsertTag(tag, cssClass, words) {\n        while (words.length > 0) {\n            var nonTags = ExtractConsecutiveWords(words, function (x) {\n                return !HtmlDiff.Utils.IsTag(x);\n            });\n\n            var specialCaseTagInjection = '';\n            var specialCaseTagInjectionIsBefore = false;\n\n            if (nonTags.length !== 0) {\n                var text = HtmlDiff.Utils.WrapText(nonTags.join(''), tag, cssClass);\n                that._content.push(text);\n            } else {\n                // Check if the tag is a special case\n                if (that._specialCaseOpeningTagRegex.test(words[0])) {\n                    that._specialTagDiffStack.push(words[0]);\n                    specialCaseTagInjection = '<ins class=\"mod\">';\n                    if (tag == 'del') {\n                        words.shift();\n\n                        // following tags may be formatting tags as well, follow through\n                        while (words.length > 0 && that._specialCaseOpeningTagRegex.test(words[0])) {\n                            words.shift();\n                        }\n                    }\n                } else if (that._specialCaseClosingTags.hasOwnProperty(words[0].toLowerCase())) {\n                    var openingTag = that._specialTagDiffStack.length === 0 ? null : that._specialTagDiffStack.pop();\n\n                    // If we didn't have an opening tag, and we don't have a match with the previous tag used \n                    if (openingTag === null || openingTag != words[words.length - 1].replace('/', '')) {\n                        // do nothing\n                    } else {\n                        specialCaseTagInjection = '</ins>';\n                        specialCaseTagInjectionIsBefore = true;\n                    }\n\n                    if (tag == 'del') {\n                        words.shift();\n\n                        // following tags may be formatting tags as well, follow through\n                        while (words.length > 0 && that._specialCaseClosingTags.hasOwnProperty(words[0].toLowerCase())) {\n                            words.shift();\n                        }\n                    }\n                }\n            }\n\n            if (words.length === 0 && specialCaseTagInjection.length === 0) {\n                break;\n            }\n\n            if (specialCaseTagInjectionIsBefore) {\n                that._content.push(specialCaseTagInjection + ExtractConsecutiveWords(words, HtmlDiff.Utils.IsTag).join(''));\n            } else {\n                that._content.push(ExtractConsecutiveWords(words, HtmlDiff.Utils.IsTag).join('') + specialCaseTagInjection);\n            }\n        }\n    };\n\n    var ExtractConsecutiveWords = function ExtractConsecutiveWords(words, condition) {\n        var indexOfFirstTag = null;\n\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i];\n\n            if (i === 0 && word == ' ') {\n                words[i] = '&nbsp;';\n            }\n\n            if (!condition(word)) {\n                indexOfFirstTag = i;\n                break;\n            }\n        }\n\n        var items = void 0;\n        if (indexOfFirstTag !== null) {\n            items = words.slice(0, indexOfFirstTag);\n            if (indexOfFirstTag > 0) {\n                words.splice(0, indexOfFirstTag);\n            }\n        } else {\n            items = words.slice();\n            words.splice(0);\n        }\n\n        return items;\n    };\n\n    var Operations = function Operations() {\n        var positionInOld = 0,\n            positionInNew = 0;\n        var operations = [];\n\n        var matches = MatchingBlocks();\n\n        matches.push(new HtmlDiff.Match(that._oldWords.length, that._newWords.length, 0));\n\n        //Remove orphans from matches.\n        //If distance between left and right matches is 4 times longer than length of current match then it is considered as orphan\n        var mathesWithoutOrphans = RemoveOrphans(matches);\n\n        for (var i = 0; i < mathesWithoutOrphans.length; i++) {\n            var matchStartsAtCurrentPositionInOld = positionInOld == mathesWithoutOrphans[i].StartInOld;\n            var matchStartsAtCurrentPositionInNew = positionInNew == mathesWithoutOrphans[i].StartInNew;\n\n            var action = null;\n\n            if (matchStartsAtCurrentPositionInOld === false && matchStartsAtCurrentPositionInNew === false) {\n                action = HtmlDiff.Action.Replace;\n            } else if (matchStartsAtCurrentPositionInOld && matchStartsAtCurrentPositionInNew === false) {\n                action = HtmlDiff.Action.Insert;\n            } else if (matchStartsAtCurrentPositionInOld === false) {\n                action = HtmlDiff.Action.Delete;\n            } else // This occurs if the first few words are the same in both versions\n                {\n                    action = HtmlDiff.Action.None;\n                }\n\n            if (action != HtmlDiff.Action.None) {\n                operations.push(new HtmlDiff.Operation(action, positionInOld, mathesWithoutOrphans[i].StartInOld, positionInNew, mathesWithoutOrphans[i].StartInNew));\n            }\n\n            if (mathesWithoutOrphans[i].Size !== 0) {\n                operations.push(new HtmlDiff.Operation(HtmlDiff.Action.Equal, mathesWithoutOrphans[i].StartInOld, mathesWithoutOrphans[i].EndInOld(), mathesWithoutOrphans[i].StartInNew, mathesWithoutOrphans[i].EndInNew()));\n            }\n\n            positionInOld = mathesWithoutOrphans[i].EndInOld();\n            positionInNew = mathesWithoutOrphans[i].EndInNew();\n        }\n\n        return operations;\n    };\n\n    var RemoveOrphans = function RemoveOrphans(matches) {\n        var matchesNoOrphans = [];\n        var prev = null;\n        var curr = null;\n        for (var i = 0; i < matches.length; i++) {\n            if (curr === null) {\n                prev = new HtmlDiff.Match(0, 0, 0);\n                curr = matches[i];\n                continue;\n            }\n\n            //if match has no diff on the left or on the right\n            if (prev.EndInOld() == curr.StartInOld && prev.EndInNew() == curr.StartInNew || curr.EndInOld() == matches[i].StartInOld && curr.EndInNew() == matches[i].StartInNew) {\n                matchesNoOrphans.push(new HtmlDiff.Match(curr.StartInOld, curr.StartInNew, curr.Size));\n                prev = curr;\n                curr = matches[i];\n                continue;\n            }\n\n            var j = void 0;\n            var oldDistanceInChars = 0;\n            for (j = Math.min(prev.EndInOld(), matches[i].StartInOld - prev.EndInOld()); j < Math.max(prev.EndInOld(), matches[i].StartInOld - prev.EndInOld()); j++) {\n                oldDistanceInChars += that._oldWords[j].length;\n            }\n\n            var newDistanceInChars = 0;\n            for (j = Math.min(prev.EndInNew(), matches[i].StartInNew - prev.EndInNew()); j < Math.max(prev.EndInNew(), matches[i].StartInNew - prev.EndInNew()); j++) {\n                newDistanceInChars += that._newWords[j].length;\n            }\n\n            var currMatchLengthInChars = 0;\n            for (j = Math.min(curr.StartInNew, curr.EndInNew() - curr.StartInNew); j < Math.max(curr.StartInNew, curr.EndInNew() - curr.StartInNew); j++) {\n                currMatchLengthInChars += that._newWords[j].length;\n            }\n\n            if (currMatchLengthInChars > Math.max(oldDistanceInChars, newDistanceInChars) * that.OrphanMatchThreshold) {\n                matchesNoOrphans.push(new HtmlDiff.Match(curr.StartInOld, curr.StartInNew, curr.Size));\n            }\n\n            prev = curr;\n            curr = matches[i];\n        }\n\n        matchesNoOrphans.push(new HtmlDiff.Match(curr.StartInOld, curr.StartInNew, curr.Size));\n        return matchesNoOrphans;\n    };\n\n    var MatchingBlocks = function MatchingBlocks() {\n        var matchingBlocks = [];\n        FindMatchingBlocks(0, that._oldWords.length, 0, that._newWords.length, matchingBlocks);\n        return matchingBlocks;\n    };\n\n    var FindMatchingBlocks = function FindMatchingBlocks(startInOld, endInOld, startInNew, endInNew, matchingBlocks) {\n        var match = FindMatch(startInOld, endInOld, startInNew, endInNew);\n\n        if (match !== null) {\n            if (startInOld < match.StartInOld && startInNew < match.StartInNew) {\n                FindMatchingBlocks(startInOld, match.StartInOld, startInNew, match.StartInNew, matchingBlocks);\n            }\n\n            matchingBlocks.push(match);\n\n            if (match.EndInOld() < endInOld && match.EndInNew() < endInNew) {\n                FindMatchingBlocks(match.EndInOld(), endInOld, match.EndInNew(), endInNew, matchingBlocks);\n            }\n        }\n    };\n\n    var FindMatch = function FindMatch(startInOld, endInOld, startInNew, endInNew) {\n        // For large texts it is more likely that there is a Match of size bigger than maximum granularity.\n        // If not then go down and try to find it with smaller granularity.\n        for (var i = that._matchGranularity; i > 0; i--) {\n            var options = new HtmlDiff.MatchOptions();\n            options.BlockSize = i;\n            options.RepeatingWordsAccuracy = that.RepeatingWordsAccuracy;\n            options.IgnoreWhitespaceDifferences = that.IgnoreWhitespaceDifferences;\n\n            var finder = new HtmlDiff.MatchFinder(that._oldWords, that._newWords, startInOld, endInOld, startInNew, endInNew, options);\n            var match = finder.FindMatch();\n            if (match !== null) {\n                return match;\n            }\n        }\n\n        return null;\n    };\n};\n\n/* STATIC OBJECTS */\n\nHtmlDiff.Action = {\n    Equal: 0,\n    Delete: 1,\n    Insert: 2,\n    None: 3,\n    Replace: 4\n};\n\nHtmlDiff.Mode = {\n    Character: 0,\n    Tag: 1,\n    Whitespace: 2,\n    Entity: 3\n};\n\nHtmlDiff.Utils = {\n    OpeningTagRegex: new RegExp(/^\\s*<[^>]+>\\s*$/),\n    ClosingTagTexRegex: new RegExp(/^\\s*<\\/[^>]+>\\s*$/),\n    TagWordRegex: new RegExp(/<[^\\s>]+/),\n    WhitespaceRegex: new RegExp(/^(\\s|&nbsp;)+$/),\n    WordRegex: new RegExp(/[\\w#@]+/),\n    SpecialCaseWordTags: ['<img'],\n    IsTag: function IsTag(item) {\n        for (var i = 0; i < HtmlDiff.Utils.SpecialCaseWordTags.length; i++) {\n            if (item !== null && item.startsWith(HtmlDiff.Utils.SpecialCaseWordTags[i])) {\n                return false;\n            }\n        }\n\n        return HtmlDiff.Utils.IsOpeningTag(item) || HtmlDiff.Utils.IsClosingTag(item);\n    },\n    IsOpeningTag: function IsOpeningTag(item) {\n        return HtmlDiff.Utils.OpeningTagRegex.test(item);\n    },\n    IsClosingTag: function IsClosingTag(item) {\n        return HtmlDiff.Utils.ClosingTagTexRegex.test(item);\n    },\n    StripTagAttributes: function StripTagAttributes(word) {\n        var matches = word.match(HtmlDiff.Utils.TagWordRegex);\n        var tag = matches.length > 0 ? matches[0] : '';\n        word = tag + (word.endsWith('/>') ? '/>' : '>');\n        return word;\n    },\n    WrapText: function WrapText(text, tagName, cssClass) {\n        return '<' + tagName + ' class=\"' + cssClass + '\">' + text + '</' + tagName + '>';\n    },\n    IsStartOfTag: function IsStartOfTag(val) {\n        return val == '<';\n    },\n    IsEndOfTag: function IsEndOfTag(val) {\n        return val == '>';\n    },\n    IsStartOfEntity: function IsStartOfEntity(val) {\n        return val == '&';\n    },\n    IsEndOfEntity: function IsEndOfEntity(val) {\n        return val == ';';\n    },\n    IsWhiteSpace: function IsWhiteSpace(value) {\n        return HtmlDiff.Utils.WhitespaceRegex.test(value);\n    },\n    StripAnyAttributes: function StripAnyAttributes(word) {\n        if (HtmlDiff.Utils.IsTag(word)) {\n            return HtmlDiff.Utils.StripTagAttributes(word);\n        }\n\n        return word;\n    },\n    IsWord: function IsWord(text) {\n        return HtmlDiff.Utils.WordRegex.test(text);\n    }\n};\n\nHtmlDiff.WordSplitter = {\n    ConvertHtmlToListOfWords: function ConvertHtmlToListOfWords(text, blockExpressions) {\n        var mode = HtmlDiff.Mode.Character;\n        var currentWord = []; // new List<char>();\n        var words = []; // new List<string>();\n\n        var blockLocations = HtmlDiff.WordSplitter.FindBlocks(text, blockExpressions);\n\n        var isBlockCheckRequired = blockLocations.length > 0;\n        var isGrouping = false;\n        var groupingUntil = -1;\n\n        for (var index = 0; index < text.length; index++) {\n            var character = text[index];\n\n            // Don't bother executing block checks if we don't have any blocks to check for!\n            if (isBlockCheckRequired) {\n                // Check if we have completed grouping a text sequence/block\n                if (groupingUntil == index) {\n                    groupingUntil = -1;\n                    isGrouping = false;\n                }\n\n                // Check if we need to group the next text sequence/block\n                if (blockLocations.hasOwnProperty(index)) {\n                    isGrouping = true;\n                    groupingUntil = blockLocations[index];\n                }\n\n                // if we are grouping, then we don't care about what type of character we have, it's going to be treated as a word\n                if (isGrouping) {\n                    currentWord.push(character);\n                    mode = HtmlDiff.Mode.Character;\n                    continue;\n                }\n            }\n\n            switch (mode) {\n                case HtmlDiff.Mode.Character:\n\n                    if (HtmlDiff.Utils.IsStartOfTag(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push('<');\n                        mode = HtmlDiff.Mode.Tag;\n                    } else if (HtmlDiff.Utils.IsStartOfEntity(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Entity;\n                    } else if (HtmlDiff.Utils.IsWhiteSpace(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Whitespace;\n                    } else if (HtmlDiff.Utils.IsWord(character) && (currentWord.length === 0 || HtmlDiff.Utils.IsWord(currentWord[currentWord.length - 1]))) {\n                        currentWord.push(character);\n                    } else {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n                        currentWord = [];\n                        currentWord.push(character);\n                    }\n\n                    break;\n                case HtmlDiff.Mode.Tag:\n\n                    if (HtmlDiff.Utils.IsEndOfTag(character)) {\n                        currentWord.push(character);\n                        words.push(currentWord.join(''));\n                        currentWord = [];\n\n                        mode = HtmlDiff.Utils.IsWhiteSpace(character) ? HtmlDiff.Mode.Whitespace : HtmlDiff.Mode.Character;\n                    } else {\n                        currentWord.push(character);\n                    }\n\n                    break;\n                case HtmlDiff.Mode.Whitespace:\n\n                    if (HtmlDiff.Utils.IsStartOfTag(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Tag;\n                    } else if (HtmlDiff.Utils.IsStartOfEntity(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Entity;\n                    } else if (HtmlDiff.Utils.IsWhiteSpace(character)) {\n                        currentWord.push(character);\n                    } else {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Character;\n                    }\n\n                    break;\n                case HtmlDiff.Mode.Entity:\n                    if (HtmlDiff.Utils.IsStartOfTag(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Tag;\n                    } else if (HtmlDiff.Utils.IsWhiteSpace(character)) {\n                        if (currentWord.length !== 0) {\n                            words.push(currentWord.join(''));\n                        }\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Whitespace;\n                    } else if (HtmlDiff.Utils.IsEndOfEntity(character)) {\n                        var switchToNextMode = true;\n                        if (currentWord.length != 0) {\n                            currentWord.push(character);\n                            words.push(currentWord.join(''));\n\n                            //join &nbsp; entity with last whitespace\n                            if (words.length > 2 && HtmlDiff.Utils.IsWhiteSpace(words[words.length - 2]) && HtmlDiff.Utils.IsWhiteSpace(words[words.length - 1])) {\n                                var w1 = words[words.length - 2];\n                                var w2 = words[words.length - 1];\n\n                                words.pop();\n                                words.pop();\n                                currentWord = [];\n\n                                currentWord.concat(w1.split(''));\n                                currentWord.concat(w2.split(''));\n                                mode = HtmlDiff.Mode.Whitespace;\n                                switchToNextMode = false;\n                            }\n                        }\n\n                        if (switchToNextMode) {\n                            currentWord = [];\n                            mode = HtmlDiff.Mode.Character;\n                        }\n                    } else if (HtmlDiff.Utils.IsWord(character)) {\n                        currentWord.push(character);\n                    } else {\n                        if (currentWord.length != 0) {\n                            words.push(currentWord.join(''));\n                        }\n\n                        currentWord = [];\n                        currentWord.push(character);\n                        mode = HtmlDiff.Mode.Character;\n                    }\n                    break;\n            }\n        }\n        if (currentWord.length != 0) {\n            words.push(currentWord.join(''));\n        }\n\n        return words;\n    },\n    FindBlocks: function FindBlocks(text, blockExpressions) {\n        var blockLocations = {}; // new Dictionary<int, int>();\n\n        if (blockExpressions == null) {\n            return blockLocations;\n        }\n\n        for (var i = 0; i < blockExpressions.length; i++) {\n            var matches = text.match(blockExpressions[i]);\n            var matchEnd = 0;\n            for (var j = 0; j < matches.length; j++) {\n                var index = text.indexOf(matches[j], matchEnd);\n                blockLocations.Add(index, index + matches[j].length);\n                matchEnd = index + matches[j].length;\n            }\n        }\n\n        return blockLocations;\n    }\n};\n\n/* INSTANTIATED OBJECTS */\n\nHtmlDiff.Match = function (startInOld, startInNew, size) {\n    this.StartInOld = startInOld;\n    this.StartInNew = startInNew;\n    this.Size = size;\n    this.EndInOld = function () {\n        return this.StartInOld + this.Size;\n    };\n    this.EndInNew = function () {\n        return this.StartInNew + this.Size;\n    };\n};\n\nHtmlDiff.Operation = function (action, startInOld, endInOld, startInNew, endInNew) {\n    this.Action = action;\n    this.StartInOld = startInOld;\n    this.EndInOld = endInOld;\n    this.StartInNew = startInNew;\n    this.EndInNew = endInNew;\n};\n\nHtmlDiff.MatchOptions = function () {\n    this.BlockSize = 0;\n    this.RepeatingWordsAccuracy = 0;\n    this.IgnoreWhitespaceDifferences = false;\n};\n\nHtmlDiff.MatchFinder = function (oldWords, newWords, startInOld, endInOld, startInNew, endInNew, options) {\n    this._oldWords = oldWords;\n    this._newWords = newWords;\n    this._startInOld = startInOld;\n    this._endInOld = endInOld;\n    this._startInNew = startInNew;\n    this._endInNew = endInNew;\n    this._wordIndices = null;\n    this._options = options;\n    var that = this;\n\n    this.IndexNewWords = function () {\n        that._wordIndices = {}; // new Dictionary<string, List<int>>();\n        var block = []; // new Queue<string>(_options.BlockSize);\n        for (var i = that._startInNew; i < that._endInNew; i++) {\n\n            // if word is a tag, we should ignore attributes as attribute changes are not supported (yet)\n            var word = that.NormalizeForIndex(that._newWords[i]);\n            var key = that.PutNewWord(block, word, that._options.BlockSize);\n\n            if (key == null) {\n                continue;\n            }\n\n            if (that._wordIndices.hasOwnProperty(key)) {\n                that._wordIndices[key].push(i);\n            } else {\n                that._wordIndices[key] = [i];\n            }\n        }\n    };\n\n    this.PutNewWord = function (block, word, blockSize) {\n        block.push(word);\n        if (block.length > blockSize) {\n            block.shift();\n        }\n\n        if (block.length != blockSize) {\n            return null;\n        }\n\n        var result = '';\n        for (var i = 0; i < block.length; i++) {\n            result += block[i];\n        }\n\n        return result;\n    };\n\n    this.NormalizeForIndex = function (word) {\n        word = HtmlDiff.Utils.StripAnyAttributes(word);\n        if (that._options.IgnoreWhitespaceDifferences && HtmlDiff.Utils.IsWhiteSpace(word)) {\n            return ' ';\n        }\n\n        return word;\n    };\n\n    this.FindMatch = function () {\n        that.IndexNewWords();\n        that.RemoveRepeatingWords();\n\n        if (that._wordIndices.length == 0) {\n            return null;\n        }\n\n        var bestMatchInOld = that._startInOld;\n        var bestMatchInNew = that._startInNew;\n        var bestMatchSize = 0;\n\n        var matchLengthAt = {}; //new Dictionary<int, int>();\n        var block = []; //new Queue<string>(_options.BlockSize);\n\n        for (var indexInOld = that._startInOld; indexInOld < that._endInOld; indexInOld++) {\n            var word = that.NormalizeForIndex(that._oldWords[indexInOld]);\n            var index = that.PutNewWord(block, word, that._options.BlockSize);\n\n            if (index == null) {\n                continue;\n            }\n\n            var newMatchLengthAt = {}; //new Dictionary<int, int>();\n\n            if (!that._wordIndices.hasOwnProperty(index)) {\n                matchLengthAt = newMatchLengthAt;\n                continue;\n            }\n\n            for (var i = 0; i < that._wordIndices[index].length; i++) {\n                var newMatchLength = (matchLengthAt.hasOwnProperty(that._wordIndices[index][i] - 1) ? matchLengthAt[that._wordIndices[index][i] - 1] : 0) + 1;\n                newMatchLengthAt[that._wordIndices[index][i]] = newMatchLength;\n\n                if (newMatchLength > bestMatchSize) {\n                    bestMatchInOld = indexInOld - newMatchLength + 1 - that._options.BlockSize + 1;\n                    bestMatchInNew = that._wordIndices[index][i] - newMatchLength + 1 - that._options.BlockSize + 1;\n                    bestMatchSize = newMatchLength;\n                }\n            }\n\n            matchLengthAt = newMatchLengthAt;\n        }\n\n        return bestMatchSize != 0 ? new HtmlDiff.Match(bestMatchInOld, bestMatchInNew, bestMatchSize + that._options.BlockSize - 1) : null;\n    };\n\n    this.RemoveRepeatingWords = function () {\n        var threshold = that._newWords.length * that._options.RepeatingWordsAccuracy;\n        var repeatingWords = [];\n        for (var w in that._wordIndices) {\n            if (!that._wordIndices.hasOwnProperty(w)) {\n                continue;\n            }\n\n            if (that._wordIndices[w].length > threshold) {\n                repeatingWords.push(w);\n            }\n        }\n\n        for (var i = 0; i < repeatingWords.length; i++) {\n            delete that._wordIndices[repeatingWords[i]];\n        }\n    };\n};\n\nexports.default = HtmlDiff;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ })

/******/ });
});